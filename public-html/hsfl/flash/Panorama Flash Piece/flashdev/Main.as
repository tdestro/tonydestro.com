package{			import org.papervision3d.objects.*;	import org.papervision3d.materials.*;	import org.papervision3d.scenes.*;	import org.papervision3d.cameras.*;	import org.papervision3d.core.Number3D;		import flash.display.Stage;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.desktop.*;	import flash.utils.Dictionary;	import flash.events.*;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.filters.BlurFilter;		import flash.filters.BitmapFilterQuality;		import caurina.transitions.Tweener;	import flash.display.Stage;	import com.healthysight.InfoPanel;				public class Main extends flash.display.MovieClip{			var container:Sprite;		public var scene:MovieScene3D;		public var camera:FreeCamera3D;		var p:Cube;		var s:Sphere;		var plane:Plane;		var plane2:Plane;		var plane3:Plane;		var bam:BitmapAssetMaterial;		var planeMam:MovieMaterial;		var myPlaneDictionary:Dictionary;		var myPlaneContainer:Sprite;		var loaded_mc:MovieClip;		var loadedBitmapData:BitmapData;		var ctrX, ctrY:int, xRatio, yRatio;		var blur:BlurFilter;		var filtersArray:Array;				var infoPanel:InfoPanel;				public var xRange:Number;		public var yRange:Number;				public function Main():void{			xRange=/*60*/40;			yRange=/*20*/10;						myPlaneDictionary = new Dictionary();			loaded_mc = new hello();						container = new Sprite();			container.x = stage.stageWidth *.5;			container.y = stage.stageHeight * .5;				this.addChild(container);			scene = new MovieScene3D(container);						bam = new BitmapAssetMaterial("test");			bam.opposite=true;			var personBam = new BitmapAssetMaterial("Person");			personBam.smooth=true;			personBam.oneSide=true;						planeMam = new MovieMaterial(loaded_mc, true);			planeMam.smooth=true;			planeMam.oneSide=false;			//plane = new Plane(planeMam, 207, 69, 4, 4);			plane = new Plane(personBam, 605, 428, 12, 12);			plane.z=350;			plane.y=-100;						plane2=new Plane(planeMam, 207, 69, 4, 4);						plane3=new Plane(planeMam, 207, 69, 4, 4);						plane2.x=-300;			plane3.x=300;			plane3.z=plane2.z=0;			var plane2Rads:Number = Math.atan2(plane2.x, plane2.z);			plane2.rotationY = (plane2Rads * 180 / Math.PI) ;				var plane3Rads:Number = Math.atan2(plane3.x, plane3.z);						plane3.rotationY = (plane3Rads * 180 / Math.PI) ;						//planeMam.interactive=true;			trace("plane 2 rotation y: "+ plane2.rotationY);									trace("plane 3 rotation y: "+ plane3.rotationY);								bam.oneSide=false;			bam.smooth = true;			s = new Sphere(bam, 2000, 20, 20);			s.x=0;			s.y=0;			s.z=0;			s.rotationY=120;			scene.addChild(s);			scene.addChild(plane);			scene.addChild(plane2);			scene.addChild(plane3);						camera = createCamera(350);					scene.renderCamera(camera);									ctrX = 480;  //forcing half width			ctrY = 270;  //forcing half height			setXRatio();			setYRatio();																	////////////  click and movement handlers  //////////////			myPlaneContainer = plane.container;//we use the container sprite propertie of the plane			myPlaneDictionary[myPlaneContainer]=plane;//here we have container as key and plane as value									trace("plane.container: "+ s.container);			myPlaneContainer.buttonMode = true;//we configure a button mode			//myPlaneContainer.addEventListener( MouseEvent.ROLL_OVER, onRollOver );			myPlaneContainer.addEventListener( MouseEvent.CLICK, testClick );			//myPlaneContainer.addEventListener( MouseEvent.ROLL_OUT, onRollOut );																		///////////  register stage-wide click handler  //////////////			this.addEventListener(Event.ENTER_FRAME, onEnterFrame);			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			//this.addEventListener(MouseEvent.CLICK, onClick);									////////////////////////////////////////////						//////// add blur filter  /////////			// Create a DropShadowFilter instance.			/////  too slow to use in the actual scene  ////////			/*			blur = new BlurFilter();						blur.blurX = 100;			blur.blurY = 100;			blur.quality = BitmapFilterQuality.LOW;						// Create the filters array, adding the filter to the array by passing it as 			// a parameter to the Array() constructor.			filtersArray = new Array(blur);						// Assign the filters array to the display object to apply the filter.			scene.container.filters = filtersArray;								*/							infoPanel = new InfoPanel(MovieClip(this));					}						//////////  create camera  //////////////				public function createCamera(foc:int):FreeCamera3D{			var cam:FreeCamera3D= new FreeCamera3D();			cam.x=0;			cam.y=0;			cam.z=0;			cam.focus=300;						return cam;		}				public function setXRatio(){			xRatio = ctrX/xRange; //150 degree up and down vertical viewing angle		}		public function setYRatio(){			yRatio = ctrY/yRange;  //45 degree up and down vertical viewing angle				}				/////////////////////////////////////////				function keyDownHandler(e:KeyboardEvent):void{			trace("keyCode: " + e.keyCode);			/*			if(e.keyCode == 32){//space bar			}*/						///hotkeys///			if(e.keyCode == 79){ // 'O', options hotkey				this.stage.addChild(infoPanel);			}					}						function testClick(e:MouseEvent):void{			trace("clickeroo");			//loaded_mc.gotoAndStop("clicked");			loaded_mc.play();		}						function onEnterFrame(e:Event):void{			planeMam.updateBitmap();						scene.renderCamera(camera);						/////////////  rotation  ////////								//TweenLite.to(Sprite(s.container), 2, {rotationY:180});			var xpos:int = (mouseX - ctrX)/xRatio;			var ypos:int = (ctrY - mouseY)/yRatio;						Tweener.addTween(camera, { rotationY:xpos, rotationX:ypos, time:2 } );								}						//changes bitmap on sphere to any loaded Bitmap object		public function changePanoramaBitmap(bmpd:Bitmap){			loadedBitmapData = bmpd.bitmapData;			//bam = new BitmapAssetMaterial(String(bmpd));			var bmat:BitmapMaterial = new BitmapMaterial(loadedBitmapData);			bmat.oneSide=false;			bmat.smooth = true;			s.material = bmat;		}			}		}		