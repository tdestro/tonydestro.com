package com.healthysight.impairments{	////////////////////////////////////////////////////////////	/* Vision impairment effect. Bitmap roughly follows the user's mouse, and meanders	   in general mouse area when mouse is still. 			-Chris Natale	*/	import flash.ui.Mouse;	import flash.display.Sprite;	import flash.utils.Timer;	import flash.geom.Point;	import flash.events.TimerEvent;	import flash.events.Event;	import flash.display.Bitmap;	import flash.display.BitmapData;	import com.healthysight.impairments.DistortionPoint;	import com.healthysight.impairments.DistortionBitmap;			public class MovingImpairment extends Sprite{				var p:*;				var updateTimer:Timer;		var angle:Number;		var mass:int;		var friction:Number;		var vx:int; //velocity		var vy:int;		var ax:int; //acceleration		var ay:int; 				var distortionX:DistortionPoint; //distortion positions		var distortionY:DistortionPoint;				var bitmap:Bitmap;		var bitmap_vx:Number;		var bitmap_vy:Number;						public function MovingImpairment(_p:*, bmp:Bitmap){			distortionInit();						bitmap = bmp;			bmp.smoothing=true;			friction = .4; //multiplier; closer to 1 is no friction, closer to 0 is more friction			angle=0;			mass=10;			p= _p; //parent clip					vx = vy = ax = ay = distortionX.x = distortionX.y = distortionY.x = distortionY.y = 0;								updateTimer = new Timer(50, 0);	        updateTimer.addEventListener(TimerEvent.TIMER, timerHandler);			updateTimer.start();					bitmap.x= 0;			bitmap.y = 0;			this.addChild(bitmap);			//Mouse.hide()		}								private function distortionInit(){			distortionX = new DistortionPoint(0,0);			distortionY = new DistortionPoint(0,0);						distortionX.range = 20;			distortionX.mass = 1;			distortionY.mass = 1.0;			distortionY.range = 15;					}						////////////////////////////////////////////////////////////////////////		///  used to simulate gravitational force exerted on our distortion  ///		////////////////////////////////////////////////////////////////////////				private function gravitate(forcePt:DistortionPoint){			var dx:Number = forcePt.x - this.x;			var dy:Number = forcePt.y - this.y;			var dist:Number = Math.sqrt(dx*dx + dy*dy);			var ax:Number = dx* forcePt.mass;			var ay:Number = dy* forcePt.mass;			trace("dx: "+ dx);			//trace("dy: "+ dy);			this.vx += ax;			this.vy += ay;		}						/////////////////////////////////////////////////////////////////////		////////////////////////  update function  //////////////////////////		/////////////////////////////////////////////////////////////////////				private function timerHandler(e:Event){			if(angle > Math.PI * 2){ angle=0 }			var adjustedX:Number = p.mouseX - this.width/2;			var adjustedY:Number = p.mouseY - this.height/2;						distortionX.x = adjustedX+ Math.sin(angle) * distortionX.range;			distortionX.y = adjustedY;			distortionY.x = adjustedX;			distortionY.y = adjustedY + Math.sin(angle) * distortionY.range;			distortionX.mass = Math.random() *1;			distortionY.mass = Math.random() * 1;			trace("distortionX.mass: "+ distortionX.mass);						trace("distortionY.mass: "+ distortionY.mass);						gravitate(distortionX);			gravitate(distortionY);			//var dp:DistortionPoint = new DistortionPoint(p.mouseX, p.mouseY, 1, 1);			//gravitate(dp);						this.vx = this.vx * friction;			this.vy = this.vy * friction;			this.x += this.vx;			this.y += this.vy;			//trace("this.x: "+ this.x);			//trace("this.x: "+ this.y);						angle +=1;		}						/////////////////////////////////////////////////////////////////////////		/////////////  remove current vision impairment from stage  /////////////		/////////////////////////////////////////////////////////////////////////				public function cleanup(){			try{				updateTimer.stop();								this.removeChild(bitmap);				//Mouse.show();			}catch(e:Error){trace(e.message)}		}				}	}