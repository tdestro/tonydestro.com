package com.healthysight{	/*	Loads in all sub-swf's for the Healthy Sight for Life Flash Piece.		-Chris Natale, 12/12/08	*/	import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.display.DisplayObject;    import flash.display.Loader;    import flash.display.Sprite;	import flash.events.Event;	import flash.events.HTTPStatusEvent;	import flash.events.ProgressEvent;	import flash.events.IEventDispatcher;	import flash.events.MouseEvent;	import flash.events.IOErrorEvent;	import flash.events.TimerEvent;    import flash.net.URLRequest;	import flash.utils.Timer;	import com.healthysight.events.*;	import org.papervision3d.PaperBase;		import com.pixelwelders.events.Broadcaster;	import com.healthysight.CirclePreloader;			//trying out decompression for large swf file	import nochump.util.zip.*;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.utils.IDataInput;	import flash.utils.ByteArray;		public class Shell extends MovieClip{		public var nav:MovieClip;		public var p3d:PaperBase;				var navLoader:Loader;		var p3dZipLoader:URLLoader;				var p3dLoader:Loader;		var p3dLoaded, navLoaded:Boolean=false;		var videoLoader:Loader; 		public var t:Timer;		protected var videoCallout_mc:VideoCallout;		var contentArray:Array = new Array();		var videoPreloader:CirclePreloader;		var videoGrey:VideoGrey=new VideoGrey();				public function Shell(){			//trace("this.name: "+ this.name);	 		t = new Timer(2000, 1);			t.addEventListener(TimerEvent.TIMER_COMPLETE, tick);			nav= new MovieClip();			loaderBg_mc.circlePreloader.pct=0;						/////////  load papervision module  ///////////			p3dZipLoader = new URLLoader();			p3dZipLoader.dataFormat = URLLoaderDataFormat.BINARY;						contentArray.push(p3dZipLoader);			configureListeners(p3dZipLoader, "p3dZip");			var url:String="flash/Panorama_Module.zip";			var urlReq:URLRequest = new URLRequest(url);						p3dZipLoader.load(urlReq);									//load nav			navLoader = new Loader();			contentArray.push(navLoader);			configureListeners(navLoader.contentLoaderInfo, "nav");			//ldr.mask = rect;			var url2:String = "flash/DiseaseNavigation.swf";			var urlReq2:URLRequest = new URLRequest(url2);			navLoader.load(urlReq2);						addChild(navLoader);												//calculate load percent			addEventListener(Event.ENTER_FRAME, calculateLoad);					}						private var totalBytes:Number=0;		private var loadedBytes:Number=0;				private function calculateLoad(e:Event){			loadedBytes=0;			totalBytes=0;			for(var i:Number=0; i< contentArray.length; i++){				if(contentArray[i].hasOwnProperty('contentLoaderInfo')){					loadedBytes += contentArray[i].contentLoaderInfo.bytesLoaded; 					totalBytes += contentArray[i].contentLoaderInfo.bytesTotal;				}				else{					loadedBytes += contentArray[i].bytesLoaded; 					totalBytes += contentArray[i].bytesTotal;				}			}						if(loadedBytes < totalBytes && totalBytes > 0){								loaderBg_mc.circlePreloader.pct=loadedBytes/totalBytes;			}			else if(totalBytes==0){				loaderBg_mc.circlePreloader.pct=0;			}			else{				loaderBg_mc.circlePreloader.pct=100;			}						if(loadedBytes==totalBytes && totalBytes > 0){				//mainPreloader_mc.visible=false;								removeEventListener(Event.ENTER_FRAME, calculateLoad);								//turn on navs				stageMask_mc.visible=false;				removeChild(stageMask_mc);			}								}				/////////////////////////////////////////////////////////////////////////////////		//////////////////  loader initialization and event handlers  ///////////////////		/////////////////////////////////////////////////////////////////////////////////		        private function configureListeners(dispatcher:IEventDispatcher, section:String):void {            dispatcher.addEventListener(Event.COMPLETE, this[section+"CompleteHandler"]);            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);            dispatcher.addEventListener(Event.INIT, this[section+"InitHandler"]);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);            dispatcher.addEventListener(Event.OPEN, openHandler);            dispatcher.addEventListener(ProgressEvent.PROGRESS, this[section+"ProgressHandler"]);            dispatcher.addEventListener(Event.UNLOAD, unLoadHandler);     	}						        private function completeHandler(event:Event):void {            trace("completeHandler: " + event);        }				        private function httpStatusHandler(event:HTTPStatusEvent):void {            trace("httpStatusHandler: " + event);        }				/////////////////  the different init handlers  ////////////////////        private function navInitHandler(event:Event):void {			navLoaded=true;			trace("init: "+ event.currentTarget.content.name);			nav = MovieClip(navLoader.content);			if(!p3dLoaded){				nav.visible=false;			}			else{				t.start();			}			nav.container = this;			nav.x=430;			nav.y=340;            trace("initHandler: " + event);									//////  attach event to close nav when user clicks outside of it			try{				this.addEventListener(MouseEvent.CLICK, nav.onStageClick, true);									}			catch(e:Error){trace("error attaching event listener: " + e);}						        }				private function navCompleteHandler(event:Event):void{					}				private function p3dZipInitHandler(event:Event):void{					}				private function p3dZipCompleteHandler(event:Event):void{			p3dLoaded=true;			if(navLoaded){				//removeChild(loaderBg_mc);				t.start();			}			//p3d is a paperbase object			//we need to uncompress			var zipFile:ZipFile = new ZipFile(p3dZipLoader.data);			for(var i:int = 0; i < zipFile.entries.length; i++) {				var entry:ZipEntry = zipFile.entries[i];				// extract the entry's data from the zip				var data:ByteArray = zipFile.getInput(entry);			}									p3dLoader = new Loader();			p3dLoader.contentLoaderInfo.addEventListener (Event.COMPLETE, onConvertFinished);			//configureListeners(navLoader.contentLoaderInfo, "p3d");						p3dLoader.loadBytes(data);								}		private function onConvertFinished(event:Event):void{						nav.visible=true;			p3d = PaperBase(p3dLoader.content);						p3d.p = this;			p3d.x=0;			p3d.y=0;			addChild(p3d);			swapChildren(p3d,navLoader); 					}				///////////////////////////////////////////////////////////        private function ioErrorHandler(event:IOErrorEvent):void {            trace("ioErrorHandler: " + event);        }        private function openHandler(event:Event):void {            trace("openHandler: " + event);        }        private function videoProgressHandler(event:ProgressEvent):void {           // trace("progressHandler: bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);			videoPreloader.pct=event.bytesLoaded/event.bytesTotal;		}		private function navProgressHandler(event:ProgressEvent):void{}		private function p3dZipProgressHandler(event:ProgressEvent):void{}		        private function unLoadHandler(event:Event):void {            trace("unLoadHandler: " + event);        }        private function clickHandler(event:MouseEvent):void {			/*            trace("clickHandler: " + event);            var loader:Loader = Loader(event.target);            loader.unload();			*/        }						public function tick(e:TimerEvent):void{			trace("tick");			removeChild(loaderBg_mc);			//add click event to video callout			videoCallout_mc = new VideoCallout();			videoCallout_mc.buttonMode=true;			videoCallout_mc.x=709;			videoCallout_mc.y=30;			addChild(videoCallout_mc);			videoCallout_mc.addEventListener(MouseEvent.ROLL_OVER, onVideoCalloutOver);			videoCallout_mc.addEventListener(MouseEvent.ROLL_OUT, onVideoCalloutOut);			videoCallout_mc.addEventListener(MouseEvent.CLICK, onVideoCalloutClick);		}				protected function onVideoCalloutOver(e:MouseEvent){			e.currentTarget.next_btn1.gotoAndPlay("btnover");		}		protected function onVideoCalloutOut(e:MouseEvent){			e.currentTarget.next_btn1.gotoAndPlay("btnvisited");		}				public function onVideoCalloutClick(e:MouseEvent){			//load nav			e.currentTarget.next_btn1.gotoAndPlay("btnrelease");			videoLoader = new Loader();			configureListeners(videoLoader.contentLoaderInfo, "video");			var videoUrl:String = "flash/VideoModule_forPanorama.swf";			var videoUrlReq:URLRequest = new URLRequest(videoUrl);			videoLoader.load(videoUrlReq);			videoPreloader = new CirclePreloader();			videoPreloader.x=stage.width/2;			videoPreloader.y=stage.height/2;			addChild(videoPreloader);								}				protected function videoCompleteHandler(e:Event){					}				//import com.healthysight.VideoModulePano;		protected function videoInitHandler(e:Event){			removeChild(videoPreloader);			addChild(videoGrey);						videoGrey.buttonMode=false;			videoGrey.addEventListener(MouseEvent.CLICK,onGreyClick);			addChild(videoLoader);			//videoLoader.p=this;			p3d.videoLock=true;		}				public function removeVideo(){			videoGrey.removeEventListener(MouseEvent.CLICK, onGreyClick);			removeChild(videoGrey);			try{				removeChild(videoPreloader);					}			catch(e:Error){trace(e)}						removeChild(videoLoader);			p3d.videoLock=false;		}				function onGreyClick(e:MouseEvent){					}	}		}