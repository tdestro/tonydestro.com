package com.healthysight{	/*	Holds data for a complete Panorama Scene.		Chris Natale 	1/8/09	*/		import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Bitmap;	import flash.net.URLRequest;	import flash.events.*;	import flash.utils.Timer;	import org.papervision3d.cameras.Camera3D;	import org.papervision3d.events.FileLoadEvent;	import org.papervision3d.events.InteractiveScene3DEvent;	import org.papervision3d.objects.primitives.Plane;	import org.papervision3d.view.layer.ViewportLayer;			import org.papervision3d.objects.parsers.DAE;	import org.papervision3d.materials.*;		import com.healthysight.PanoramaModule;	import com.healthysight.events.*;	import com.healthysight.impairments.Intro;	import gs.TweenLite;	import gs.easing.*;		public class PanoramaScene extends Sprite{				public var dae:DAE;		public var camera:Camera3D;		public var animatedAssets:Object;		public var effectsLayer:ViewportLayer;		protected var p:PanoramaModule;		protected var animatedAssetTimer:Timer;		protected var relativePath:String;		protected var prevX, nextX, prevZ, nextZ, prevRotationY, nextRotationY:Number;		protected var firstRun:Boolean;				/////////////////////////////  getter/setter methods  ///////////////////////////		public function get daeRotation():Array{			var tmpArr:Array = new Array();			tmpArr[0] = dae.rotationX;			tmpArr[1] = dae.rotationY;			tmpArr[2] = dae.rotationZ;			return tmpArr;		}				public function set daeRotation(value:Array):void{			dae.rotationX = value[0];			dae.rotationY = value[1];			dae.rotationZ = value[2];		}						public function PanoramaScene(_filePath:String, _p:PanoramaModule, _animatedAssets:Object=null, _relativePath:String="", _camera:Camera3D=null, _firstRun:Boolean=false){			firstRun=_firstRun;			camera = _camera;			relativePath = _relativePath;			animatedAssets = _animatedAssets;			animatedAssets.loaders = new Array();			p = _p; //for parent class references			//fade out old scene								if(_camera != null){				//p.default_camera = _camera;				p.changeCameraSettings(_camera);			}						loadDAE(_filePath, _relativePath);										addEventListener(SceneEvent.PROGRESS, onSceneEventProgress);			addEventListener(SceneEvent.LOADED, onSceneEventLoaded);		}		protected function onSceneEventProgress(e:SceneEvent){			p.loaderBg_mc.moduleText_mc.sectionDescription.text= "Loading Scene Asset "+ e.currentAsset + " of " + e.totalAssets;			//p.loaderBg_mc.moduleText_mc.sectionDescription.text= "Loading Scene Assets";			if(e.bytesLoaded/e.bytesTotal > 0){				p.loaderBg_mc.circlePreloader.pct=e.bytesLoaded/e.bytesTotal;			}			else{				p.loaderBg_mc.circlePreloader.pct=0;			}		}				protected function onSceneEventLoaded(e:SceneEvent){			p.loaderBg_mc.circlePreloader.pct=100;						p.loaderBg_mc.moduleText_mc.sectionDescription.text= "";		}				protected function loadDAE(_filePath:String, _relativePath:String){			////////////// test DAE import  ////////////////			dae = new DAE();			dae.p=this;			dae.addEventListener(FileLoadEvent.LOAD_COMPLETE, daeLoadComplete);			dae.addEventListener(FileLoadEvent.LOAD_PROGRESS, daeLoadProgress);			dae.addEventListener(FileLoadEvent.LOAD_ERROR, daeLoadError);			dae.addEventListener(FileLoadEvent.COLLADA_MATERIALS_DONE, daeMaterialsLoaded);			dae.load(_relativePath + _filePath);							p.loaderBg_mc.circlePreloader.pct=0;						p.loaderBg_mc.moduleText_mc.sectionDescription.text= "Loading Scene";					}								//////////////////////////////////////////////////////////////////		///////////////////  Collada Loading Events  /////////////////////		//////////////////////////////////////////////////////////////////				private function daeLoadComplete(e:FileLoadEvent){			p.loaderBg_mc.moduleText_mc.sectionDescription.text = "Finished Loading Background";		}				private function daeLoadProgress(e:FileLoadEvent){			if(e.bytesLoaded/e.bytesTotal > 0){				p.loaderBg_mc.circlePreloader.pct=e.bytesLoaded/e.bytesTotal;			}			else{				p.loaderBg_mc.circlePreloader.pct=0;							}		}				private function daeLoadError(e:FileLoadEvent){					}				/////////  triggered when all collada materials are loaded  /////////		protected var animatedAssetsCtr:int=0;				private function daeMaterialsLoaded(e:FileLoadEvent){			for each (var m:* in dae.materials.materialsByName){				m.oneSide=false;				m.smooth=true;				//m.precise=true;			}									//if there are swf's or additional jpg's to load for this scene, load them. if not, load the scene			if(animatedAssets == null){				showScene();			}			else{				p.loaderBg_mc.moduleText_mc.sectionDescription.text= "Loading Additional Content";				p.loaderBg_mc.circlePreloader.pct=0;								animatedAssetTimer = new Timer(100, 0);				animatedAssetTimer.addEventListener(TimerEvent.TIMER, onAnimatedAssetTimer);								for (var i:int=0; i< animatedAssets.urls.length; i++){					var ldr:Loader = new Loader();					var url:String = relativePath + animatedAssets.urls[i];					var urlReq:URLRequest = new URLRequest(url);					//ldr.addEventListener(ProgressEvent.PROGRESS, animatedAssetProgress);					ldr.contentLoaderInfo.addEventListener(Event.INIT, animatedAssetInit,false, 0, true);					ldr.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, animatedAssetioErrorHandler,false, 0, true);					ldr.load(urlReq);					animatedAssets.loaders.push(ldr);																		}				animatedAssetTimer.start();							}		}										//////////////////////////////////////////////////////////////////////////////////////////////////		////////////////////////////////////  Animated Asset Events  /////////////////////////////////////		//////////////////////////////////////////////////////////////////////////////////////////////////		private function onAnimatedAssetTimer(e:TimerEvent){						var loaded:int=0;			var total:int=0;			for (var i:int=0; i< animatedAssets.loaders.length; i++){				var ldrInfo:* = animatedAssets.loaders[i].contentLoaderInfo;				loaded += ldrInfo.bytesLoaded;				total += ldrInfo.bytesTotal;			}						p.loaderBg_mc.moduleText_mc.sectionDescription.text= "Loading Additional Assets";			if(loaded/total>0){				p.loaderBg_mc.circlePreloader.pct=loaded/total;			}			else{				p.loaderBg_mc.circlePreloader.pct=0;							}					}				private function animatedAssetioErrorHandler(e:IOErrorEvent){			animatedAssetsCtr++;			if(animatedAssetsCtr == animatedAssets.loaders.length){				animatedAssetTimer.removeEventListener(TimerEvent.TIMER, onAnimatedAssetTimer);				//createAnimatedAssets();				//showScene();			}		}				private function animatedAssetInit(e:Event){			animatedAssetsCtr++;			if(animatedAssetsCtr == animatedAssets.loaders.length){				animatedAssetTimer.removeEventListener(TimerEvent.TIMER, onAnimatedAssetTimer);				createAnimatedAssets();			}					}								//////////////////////////////////////////////////////////////////////////////////		/////////////////////////  Animated Asset Creation  //////////////////////////////		//////////////////////////////////////////////////////////////////////////////////				protected function createAnimatedAssets(){			p.loaderBg_mc.circlePreloader.pct=0;						p.loaderBg_mc.moduleText_mc.sectionDescription.text= "";			//p.loaderBg_mc.preloader_mc.loaded.scaleX=0;						//loop through animatedAssets, mapping onto plane and adding to current_scene at specified location			for(var i:int=0; i<animatedAssets.loaders.length; i++){				try{					trace(animatedAssets.loaders[i].contentLoaderInfo.content.name);					var loadedContent:*;					var planeMat:*;					if(animatedAssets.loaders[i].contentLoaderInfo.content is MovieClip){						loadedContent = MovieClip(animatedAssets.loaders[i].contentLoaderInfo.content);												planeMat= new MovieMaterial(loadedContent, true, true);						planeMat.interactive=true;											}					else{ //quickie addition of png and jpg support						loadedContent = Bitmap(animatedAssets.loaders[i].contentLoaderInfo.content);						planeMat = new BitmapMaterial(loadedContent.bitmapData);					}					planeMat.smooth=true;					planeMat.oneSide=true;					//planeMat.interactive=true;							var plane:Plane = new Plane(planeMat, loadedContent.width, loadedContent.height, 4, 4);										plane.x=animatedAssets.positions[i][0];					plane.y=animatedAssets.positions[i][1];					plane.z=animatedAssets.positions[i][2];					plane.rotationX=animatedAssets.rotation[i][0];					plane.rotationY=animatedAssets.rotation[i][1];					plane.rotationZ=animatedAssets.rotation[i][2];					p.current_scene.addChild(plane);															if(i==0 && animatedAssets.loaders.length > 2){						//create effects layer for presbyopia. Foreground objects go here.						effectsLayer = new ViewportLayer(p.viewport, plane);						p.viewport.containerSprite.addLayer(effectsLayer);												//p.parentLayer.addLayer(effectsLayer);													}					//check if these are the previous or next btn					else if(i==animatedAssets.loaders.length-1 || i==animatedAssets.loaders.length-2){						plane.material.interactive=true;												if(i==animatedAssets.loaders.length-2){//previous button							plane.scale=.4;							//plane.rotationY-=40;							prevRotationY=plane.rotationY;							prevX=plane.x;							prevZ=plane.z;							plane.addEventListener(InteractiveScene3DEvent.OBJECT_OUT,prevBtnOut);							plane.addEventListener(InteractiveScene3DEvent.OBJECT_OVER,prevBtnOver);							plane.addEventListener(InteractiveScene3DEvent.OBJECT_CLICK,prevBtnClick);						}						if(i==animatedAssets.loaders.length-1){//next button							plane.scale=.4;							//plane.rotationY+=40;							nextRotationY=plane.rotationY;							nextX=plane.x;							nextZ=plane.z;							plane.addEventListener(InteractiveScene3DEvent.OBJECT_OUT,nextBtnOut);							plane.addEventListener(InteractiveScene3DEvent.OBJECT_OVER,nextBtnOver);							plane.addEventListener(InteractiveScene3DEvent.OBJECT_CLICK,nextBtnClick);												}					}					else{						effectsLayer.addDisplayObject3D(plane);										}				}				catch(e:Error){									}			}						showScene();		}								/*		  Exit point for class initialization		*/  				protected function showScene(){			p.current_scene.addChild(dae);			if(firstRun){				//freeze rotation for intro, display info box and set intro text				p.visionImpairment = new Intro(p);//dummy for setting ok btn click events through the vision impairment system				p.loaderBg_mc.moduleText_mc.sectionDescription.text = p.loaderBg_mc.sectionTxt[6];							p.loaderBg_mc.ok_mc.visible=true;				//loaderBg_mc.fadePreloaderIn();								}			else{				p.loaderBg_mc.fadePreloaderOut();			}			TweenLite.to(p.viewport, 2, {alpha:1});		}				protected function cleanupOldPano(dir:String){ //remove all display objects						try{				removeEventListener(SceneEvent.PROGRESS, onSceneEventProgress);				removeEventListener(SceneEvent.LOADED, onSceneEventLoaded);			}catch(e:Error){}			try{				dae.removeEventListener(FileLoadEvent.LOAD_COMPLETE, daeLoadComplete);				dae.removeEventListener(FileLoadEvent.LOAD_PROGRESS, daeLoadProgress);				dae.removeEventListener(FileLoadEvent.LOAD_ERROR, daeLoadError);				dae.removeEventListener(FileLoadEvent.COLLADA_MATERIALS_DONE, daeMaterialsLoaded);			}catch(e:Error){}									var len:int= p.current_scene.objects.length;			for(var i:int=len-1; i>=0; i--){				try{                    	p.current_scene.objects[i].removeEventListener(InteractiveScene3DEvent.OBJECT_OUT,nextBtnOut);                    	p.current_scene.objects[i].removeEventListener(InteractiveScene3DEvent.OBJECT_OVER,nextBtnOver);                    	p.current_scene.objects[i].removeEventListener(InteractiveScene3DEvent.OBJECT_CLICK,nextBtnClick);														}				catch(e:Error){}				try{                    	p.current_scene.objects[i].removeEventListener(InteractiveScene3DEvent.OBJECT_OUT,prevBtnOut);                    	p.current_scene.objects[i].removeEventListener(InteractiveScene3DEvent.OBJECT_OVER,prevBtnOver);                    	p.current_scene.objects[i].removeEventListener(InteractiveScene3DEvent.OBJECT_CLICK,prevBtnClick);																			}				catch(e:Error){}				try{					p.current_scene.removeChild(p.current_scene.objects[i]);				}				catch(e:Error){}			}						if(dir=="prev"){				if(p.currentScene==1){					p.currentScene=4;					p.addScene(p.currentScene);				}				else{					p.currentScene -=1;					p.addScene(p.currentScene);				}			   			}			   			else{//next				if(p.currentScene==4){					p.currentScene=1;					p.addScene(p.currentScene);				}				else{					p.currentScene++;					p.addScene(p.currentScene);				}				   			}						p.loaderBg_mc.ok_mc.visible=false;			p.loaderBg_mc.visible=true;			p.loaderBg_mc.alpha=1;								}				/*		Previous and Next Button Events			*/				private function prevBtnOver(e:InteractiveScene3DEvent){			p.current_viewport.containerSprite.buttonMode = true;			TweenLite.to(e.displayObject3D, .5, {scale:.43});		}		private function prevBtnOut(e:InteractiveScene3DEvent){			p.current_viewport.containerSprite.buttonMode = false;			TweenLite.to(e.displayObject3D, .5, {scale:.4});		}		private function prevBtnClick(e:InteractiveScene3DEvent){			p.initVisionImpairment("healthySight_mc", p.currImpairment, false); //turn off impairment			try{p.p.nav.resetNav();}catch(e:Error){}						TweenLite.to(p.viewport, .5, {alpha:0, onComplete:cleanupOldPano, onCompleteParams:["prev"]});					}				private function nextBtnOver(e:InteractiveScene3DEvent){			p.current_viewport.containerSprite.buttonMode = true;						TweenLite.to(e.displayObject3D, .5, {scale:.43});					}		private function nextBtnOut(e:InteractiveScene3DEvent){			p.current_viewport.containerSprite.buttonMode = false;						TweenLite.to(e.displayObject3D, .5, {scale:.4});					}		private function nextBtnClick(e:InteractiveScene3DEvent){			p.initVisionImpairment("healthySight_mc", p.currImpairment); //turn off impairment			try{p.p.nav.resetNav();}catch(e:Error){}						TweenLite.to(p.viewport, .5, {alpha:0, onComplete:cleanupOldPano, onCompleteParams:["next"]});					}					}		}