package com.healthysight{	/*		The preloader container for our panorama flash piece.				Chris Natale, 12/23/08	*/		import flash.display.MovieClip;	import flash.events.MouseEvent;	import com.healthysight.events.ImpairmentEvent;	import com.healthysight.PanoramaModule;	import gs.TweenLite;		public class PanoramaLoaderContainer extends MovieClip{						public var container:PanoramaModule;		public var sectionTxt:Array = new Array("Cataracts occur when the lens of the eye becomes cloudy, and are often treated with surgery.", 										 "Glare results from excessive visible light.  It can be distracting or even dangerous, and can occur day or night.  Photochromic lenses with anti-reflective coating reduce more kinds of glare than any other lens.", 										 "To have truly Healthy Sight, vision should be optimized for today and protected for the future.", 										 "Glaucoma can cause headaches, blurred vision, difficulty adapting to darkness, haloes around lights, or no symptoms.  Early diagnosis and treatment can help prevent vision loss. ", 										 "Presbyopia is an inevitable, age-related condition that makes reading and seeing close-up difficult.  It can be treated with proper eye wear, like progressive lenses or bifocals.", 										 "Diabetic retinopathy results in broken, leaking or blocked blood vessels in the retina that impair vision over time.  Early treatment can slow progression.",										 "Choose an experience above and click on “OK” to see how important the role of Healthy Sight is to your view of the world.");										public function PanoramaLoaderContainer(){			this.alpha=0;						this.ok_mc.visible=false;			TweenLite.to(this, .5, {alpha:1});			//fadePreloaderIn();			this.addEventListener(ImpairmentEvent.LOAD_START, onImpairmentLoadStart);			this.addEventListener(ImpairmentEvent.LOADED, onImpairmentLoaded);						this.addEventListener(ImpairmentEvent.PROGRESS, onImpairmentProgress);						ok_mc.addEventListener(MouseEvent.MOUSE_OVER, onOkOver);			ok_mc.addEventListener(MouseEvent.MOUSE_OUT, onOkOut);			ok_mc.addEventListener(MouseEvent.CLICK, onOkPress);					}				protected function onOkOver(e:MouseEvent){			e.currentTarget.gotoAndPlay("over");		}		protected function onOkOut(e:MouseEvent){			e.currentTarget.gotoAndPlay("visited");		}				protected function onOkPress(e:MouseEvent){			e.currentTarget.gotoAndPlay("release");		}								///////////////////////////////////////////////////////////////////		/////////////  Impairment Event Handler Functions  ////////////////		///////////////////////////////////////////////////////////////////				protected function onImpairmentLoadStart(e:ImpairmentEvent):void{			//ok_mc.gotoAndStop("disabled");			ok_mc.visible=false;			circlePreloader.pct=0;		}				protected function onImpairmentLoaded(e:ImpairmentEvent):void{			circlePreloader.pct=100;			trace("impairment event triggered:" + e.eventName);			ok_mc.buttonMode=true;						ok_mc.addEventListener(MouseEvent.CLICK, onOkClick);						ok_mc.gotoAndStop("enabled");			ok_mc.visible=true;		}				protected function onImpairmentProgress(e:ImpairmentEvent):void{			trace("impairment event progress: loaded="+ e.bytesLoaded + ", total="+ e.bytesTotal);			var pct:Number = e.bytesLoaded/ e.bytesTotal;			circlePreloader.pct=pct;		}				public function loadImpairment(){					}				public function fadePreloaderOut(){			ok_mc.removeEventListener(MouseEvent.CLICK, onOkClick);			TweenLite.to(MovieClip(this), 1, {alpha:0, onComplete:onFadePreloaderOutFinish});		}				public function fadePreloaderIn(){			this.visible=true;									//todo: ok_mc should only be clickable if preloader is complete			//ok_mc.addEventListener(MouseEvent.CLICK, onOkClick);									TweenLite.to(this, 1, {alpha:1, onComplete:onFadePreloaderInFinish});		}				var firstRun:Boolean=true;		private function onFadePreloaderOutFinish(){			this.visible=false;			this.ok_mc.visible=true;						//todo:initialize vision impairment			//this.parent.visionImpairment.init();						/*			firstRun=false;			container.startImpairmentEffect();						*/						if(firstRun==false){				container.startImpairmentEffect();			}			else{				firstRun=false;			}					}				private function onFadePreloaderInFinish(){					}						function onOkClick(e:MouseEvent){			container.cameraRotationEnabled=true;			fadePreloaderOut();					}							}	}