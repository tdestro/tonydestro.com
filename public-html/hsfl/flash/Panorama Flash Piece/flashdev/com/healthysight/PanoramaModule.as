package com.healthysight{	/*	Loads in and animates panorama scenes for the Healthy Sight for Life flash piece.		-Chris Natale, 12/13/08	*/		import org.papervision3d.materials.BitmapFileMaterial;	import org.papervision3d.materials.*;	import org.papervision3d.cameras.Camera3D;	import org.papervision3d.PaperBase;	import org.papervision3d.events.FileLoadEvent;	import org.papervision3d.objects.primitives.Plane;	import org.papervision3d.objects.parsers.DAE;	import org.papervision3d.view.layer.ViewportLayer;		import org.papervision3d.view.layer.util.ViewportLayerSortMode;			import flash.display.Stage;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.*;	import flash.geom.Rectangle;	import flash.geom.Matrix;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.filters.BlurFilter;		import flash.filters.BitmapFilterQuality;		//import caurina.transitions.Tweener;	import flash.display.Stage;	import com.healthysight.PanoramaScene;	import com.healthysight.events.*;	import com.healthysight.impairments.*;				public class PanoramaModule extends PaperBase{		public var currentScene:int=1;		public var dae:DAE; //current collada file		public var panoramaScene:PanoramaScene;		public var plane:Plane;		public var plane2:Plane;		public var plane3:Plane;		public var personBam:BitmapAssetMaterial;				public var layer:ViewportLayer;		public var parentLayer:ViewportLayer;				public var xRange:Number;		public var yRange:Number;				public var loaderBg_mc:MovieClip;		public var cameraRotationEnabled=true;				protected var ctrX:int, ctrY:int, xRatio:int, yRatio:int;		protected var blur:BlurFilter;				protected var bam:BitmapAssetMaterial;		protected var kite_mc:MovieClip;		protected var kiteMam:MovieMaterial;		protected var planeMam:MovieMaterial;		protected var myPlaneContainer:Sprite;		protected var loaded_mc:MovieClip;		protected var loadedBitmapData:BitmapData;				protected var filtersArray:Array;		protected var firstTime:Boolean=true;						private var filePath:String;				public function PanoramaModule():void{			load();		}				public function load(_xRange:int = 60, _yRange:int = 5):void{			cameraRotationEnabled=false;						init();	//called from PaperBase base class					setFilePath();			viewport.alpha=0;						loaderBg_mc.container = this;			xRange = _xRange;			yRange = _yRange;						parentLayer = new ViewportLayer(current_viewport, null);            viewport.containerSprite.addLayer(parentLayer);            parentLayer.sortMode = ViewportLayerSortMode.INDEX_SORT;									//keeping this as guide for making plane face camera			/*			var plane3Rads:Number = Math.atan2(plane3.x, plane3.z);						plane3.rotationY = (plane3Rads * 180 / Math.PI) ;						*/			//planeMam.interactive=true;						///// keeping this as a guide for setting up layers			//parentLayer.getChildLayer(plane, true).layerIndex = 1;									//layer = viewport.getChildLayer(plane, true);			//layer.addDisplayObject3D(plane2);			/////////////////////////////////////////													//current_scene.addChild(plane4);			initCamera(350);											ctrX = 480;  //forcing half width			ctrY = 270;  //forcing half height			setXRatio();			setYRatio();													////////////////  make sure the white box is on top of 3d scene  /////////////////////			this.swapChildren(loaderBg_mc, viewport); 			//////////////  add the first panorama scene  //////////////////			addScene(currentScene, firstTime);								}							public function addScene(sceneNum:int, isFirstTime:Boolean=false){			var cam:Camera3D = new Camera3D();			var aAssets:Object = new Object();			var personRads:Number;			var prevRads:Number;			var nextRads:Number;						switch(sceneNum){								case 1:										cam.x=0;					cam.y=0;					cam.z=50;					cam.culled=true;					cam.near=0;					cam.far= 3000;										cam.zoom=110;					cam.fov=35.24;					cam.focus=8.9;										xRange=70;					yRange=5;					setXRatio();					setYRatio();																		//final 2 assets should be previous and next btns, in that order					aAssets.urls = new Array("flash/animatedAssets/Kite.swf", "wireframes/Panorama_1/panorama1_fg.png", "images/scene_btns/BackWork.swf", "images/scene_btns/NextNature.swf");					personRads = Math.atan2(200,900-cam.z);		 //x over z					prevRads = Math.atan2(-400, 100-cam.z);					nextRads = Math.atan2(400, 100-cam.z);					var kiteRads:Number = Math.atan2(1400, 2000-cam.z);										aAssets.positions = new Array(new Array(1400, 550, 2000), new Array(200, -50, 920), new Array(-400, -38, -40), new Array(400, -38, -40));					aAssets.rotation = new Array(new Array(30, kiteRads*180/Math.PI, 0), new Array(0,personRads*180/Math.PI,0), new Array(0,prevRads*180/Math.PI,0), new Array(0,nextRads*180/Math.PI,0));					if(isFirstTime){						panoramaScene= new PanoramaScene("wireframes/Panorama_1/Panorama_1_with_FG_v05.dae", this, aAssets, filePath, cam, true);																}					else{						panoramaScene= new PanoramaScene("wireframes/Panorama_1/Panorama_1_with_FG_v05.dae", this, aAssets, filePath, cam);																}										panoramaScene.daeRotation = new Array(0, 270, 0);					panoramaScene.dae.x= 0;					panoramaScene.dae.y= 10;					panoramaScene.dae.z= 300;								break;								case 2:										cam.x=0;					cam.y=0;					cam.z=-850;					cam.culled=true;					cam.near=0;					cam.far= 3000;							cam.zoom=100;					cam.fov=35.24;					cam.focus=8.5;										xRange=75;					yRange=5;					setXRatio();					setYRatio();																		//final 2 assets should be previous and next btns, in that order										aAssets.urls = new Array("wireframes/Panorama_2/panoram2_fg.png", "images/scene_btns/BackNature.swf", "images/scene_btns/NextHome.swf");				 	//x over z					prevRads = Math.atan2(-375, -900-cam.z);					nextRads = Math.atan2(375, -900-cam.z);					var scn2peopleRads = Math.atan2(300, 200-cam.z);										aAssets.positions = new Array(new Array(300,-200, 200), new Array(-375, -38, -955), new Array(375, -38, -955));					aAssets.rotation = new Array(new Array(0, scn2peopleRads, 0), new Array(0,prevRads*180/Math.PI,0), new Array(0,nextRads*180/Math.PI,0));										panoramaScene= new PanoramaScene("wireframes/Panorama_2/Panorama2_v01.dae", this, aAssets, filePath, cam);					panoramaScene.daeRotation = new Array(0, 270, 0);					panoramaScene.dae.x= 0;					panoramaScene.dae.y= 0;					panoramaScene.dae.z= 0;												break;								case 3:					cam.x=0;					cam.y=0;					cam.z=-850;					cam.culled=true;					cam.near=0;					cam.far= 3000;					cam.zoom=110;					cam.fov=34.11;					cam.focus=8;															xRange=75;					yRange=5;					setXRatio();					setYRatio();																		//final 2 assets should be previous and next btns, in that order					aAssets.urls = new Array("wireframes/Panorama_3/House_Couple.png", "images/scene_btns/BackNature.swf", "images/scene_btns/NextWork.swf");					var coupleRads = Math.atan2(200, -350-cam.z);		 //x over z					prevRads = Math.atan2(-350, -900-cam.z);					nextRads = Math.atan2(350, -900-cam.z);										aAssets.positions = new Array(new Array(200, -50, -350), new Array(-350, -38, -945), new Array(350, -38, -945));					aAssets.rotation = new Array(new Array(0, coupleRads*180/Math.PI, 0), new Array(0,prevRads*180/Math.PI,0), new Array(0,nextRads*180/Math.PI,0));										panoramaScene= new PanoramaScene("wireframes/Panorama_3/Panorama_3_v01.dae", this, aAssets, filePath, cam);					panoramaScene.daeRotation = new Array(0, 270, 0);					panoramaScene.dae.x= 0;					panoramaScene.dae.y= 50;					panoramaScene.dae.z= 0;												break;								case 4:					cam.x=0;					cam.y=0;					cam.z=-800;					cam.culled=true;					cam.near=0;					cam.far= 3000;							cam.zoom=100;								cam.fov=35.24;										cam.focus=8.5;															xRange=75;					yRange=5;					setXRatio();					setYRatio();																		//final 2 assets should be previous and next btns, in that order					aAssets.urls = new Array("wireframes/Panorama_4/Pano4_FG_2.png", "wireframes/Panorama_4/Pano4_FG_1.png", "images/scene_btns/BackHome.swf", "images/scene_btns/NextOutdoors.swf");					prevRads = Math.atan2(-350, -800-cam.z);					nextRads = Math.atan2(350, -800-cam.z);										var workerRads = Math.atan2(500,1-cam.z);		 //x over z										var worker2Rads = Math.atan2(-1050,540-cam.z);										aAssets.positions = new Array(new Array(-1050, -230, 540), new Array(500, -150, 1), new Array(-350, -38, -895), new Array(350, -38, -895));					aAssets.rotation = new Array(new Array(0, worker2Rads*180/Math.PI, 0), new Array(0, workerRads*180/Math.PI, 0), new Array(0,prevRads*180/Math.PI,0), new Array(0,nextRads*180/Math.PI,0));										panoramaScene= new PanoramaScene("wireframes/Panorama_4/Panorama4_v02.dae", this, aAssets, filePath, cam);					panoramaScene.daeRotation = new Array(0, 270, 0);					panoramaScene.dae.x= 0;					panoramaScene.dae.y= 0;					panoramaScene.dae.z= 0;																						break;											}								}			////////////////  used to set file paths dependent on whether this is base path or not  ////////////				private function setFilePath(){			if(this.stage){				filePath = "../";			}			else{				filePath = "";			}		}						//////////////////////////////////////////////////////////////////		///////////////  overlay effects initialization  /////////////////		//////////////////////////////////////////////////////////////////		public var visionImpairment:*;				//called to animate a vision impairment in		public function startImpairmentEffect(){			try{				visionImpairment.init();			}			catch(e:Error){trace(e);}		}				// called from main menu 		public var currImpairment:String="healthySight_mc";				public function initVisionImpairment(impairment:String, currentImpairment:String, stopRotation:Boolean=true):void{			if(currentImpairment != impairment){				removeVisionImpairments();				if(!stopRotation){					cameraRotationEnabled=false;				}								switch(impairment){					case "cataracts_mc":						visionImpairment = new Cataracts(this);						loaderBg_mc.moduleText_mc.sectionDescription.text = loaderBg_mc.sectionTxt[0];						loaderBg_mc.fadePreloaderIn();					break;										case "glare_mc":						visionImpairment = new Glare(this);						loaderBg_mc.moduleText_mc.sectionDescription.text = loaderBg_mc.sectionTxt[1];								loaderBg_mc.fadePreloaderIn();											break;										case "healthySight_mc":						visionImpairment = new HealthySight(this);						loaderBg_mc.moduleText_mc.sectionDescription.text = loaderBg_mc.sectionTxt[2];						loaderBg_mc.fadePreloaderIn();																	break;										case "glaucoma_mc":						visionImpairment = new Glaucoma(this);						loaderBg_mc.moduleText_mc.sectionDescription.text = loaderBg_mc.sectionTxt[3];								loaderBg_mc.fadePreloaderIn();											break;										case "presbyopia_mc":						visionImpairment = new Presbyopia(this);						loaderBg_mc.moduleText_mc.sectionDescription.text = loaderBg_mc.sectionTxt[4];							loaderBg_mc.fadePreloaderIn();											break;										case "retinopathy_mc":						visionImpairment = new Retinopathy(this);						loaderBg_mc.moduleText_mc.sectionDescription.text = loaderBg_mc.sectionTxt[5];									loaderBg_mc.fadePreloaderIn();										break;									}				currImpairment=impairment;			}					}						public function removeVisionImpairments(){			try{				visionImpairment.disable();			}			catch(e:Error){							}		}							////////////////////////////////////////////////////////////////////		////////////////////  camera control functions  ////////////////////		////////////////////////////////////////////////////////////////////				public function initCamera(foc:int):void{			default_camera.x=0;			default_camera.y=0;			default_camera.z=-250;			default_camera.culled=true;			default_camera.near=0;			default_camera.far= 3000;			default_camera.focus=31;			default_camera.fov=60;			default_camera.zoom=80;		}						/////////////////////  changes camera settings dynamically  //////////////		public function changeCameraSettings(cam:Camera3D):void{			default_camera = cam;		}						public function setXRatio(){			xRatio = ctrX/xRange; //150 degree up and down vertical viewing angle		}		public function setYRatio(){			yRatio = ctrY/yRange;  //45 degree up and down vertical viewing angle				}				///////////////////////////////////////////////////////////////////		/////////////////////  keyboard controls  /////////////////////////		///////////////////////////////////////////////////////////////////				function keyDownHandler(e:KeyboardEvent):void{			trace("keyCode: " + e.keyCode);			/*			if(e.keyCode == 32){//space bar			}*/						///hotkeys///			if(e.keyCode == 79){ // 'O', options hotkey							}					}						////////////////////////////////////////////////////////////		///////////////  Scene Rendering Loop  /////////////////////		////////////////////////////////////////////////////////////				override protected function processFrame():void{			if(cameraRotationEnabled && !videoLock){				/////////////  camera rotation  ////////				var mx:int;				var my:int;								if(this.mouseX < 0){					mx=0;				}				else if(this.mouseX > 960){					mx=960;				}				else{					mx=this.mouseX;				}								if(mouseY < 0){					my=0;				}				else if(this.mouseY > 540){					my=540;				}				else{					my=this.mouseY;				}												//displacement ratio				var dr:Number = Math.abs((mx - ctrX)/ctrX);														//the displacement					//The higher the cosine multiplier, the greater the movement is skewed toward center.				//The lowest value possible must be equal to 1 for the range of camera rotation to not change when this is applied				var d:Number = (Math.cos((Math.PI/2)*dr)*.75 + 1);								var xpos:int = ((mx - ctrX)/xRatio)*d;				var ypos:int = -(ctrY - my)/yRatio;									var dx:Number = (xpos - default_camera.rotationY);				var dy:Number = ypos - default_camera.rotationX;					var vx:Number = dx* .17;				var vy:Number = dy* .17;													//radians = degrees* PI/180				default_camera.rotationX += vy;							default_camera.rotationY += vx;								//todo: stop easing once camera gets close enough to its destination			}		}						//changes bitmap on sphere to any loaded Bitmap object		public function changePanoramaBitmap(bmpd:Bitmap){		}								/////////////////////////////////////////////////////////////////////////////////		///////////////////////  adds vision impairment to scene  ///////////////////////		/////////////////////////////////////////////////////////////////////////////////				public function addVisionImpairment(impairment:String){						switch(impairment){				case null:  //healthy sight													break;								case "Cataracts":					var cataracts:Cataracts = new Cataracts(this);				break;								case "Glare":								break;								case "Glaucoma":								break;								case "Presbyopia":									break;								case "Retinopathy":					var retinopathy:Retinopathy = new Retinopathy(this);				break;							}								}					}		}		