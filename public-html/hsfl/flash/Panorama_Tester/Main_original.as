package{			import org.papervision3d.objects.*;	import org.papervision3d.materials.*;	import org.papervision3d.scenes.*;	import org.papervision3d.cameras.*;	import org.papervision3d.core.Number3D;		import flash.display.Stage;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.utils.Dictionary;	import flash.events.*;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.filters.BlurFilter;		import flash.filters.BitmapFilterQuality;		//import gs.TweenLite;	import caurina.transitions.Tweener;	import flash.display.Stage;		/*	import org.papervision3d.materials.BitmapMaterial;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.primitives.Sphere;	import org.papervision3d.view.BasicView;				import org.papervision3d.objects.primitives.Cone;	import org.papervision3d.materials.BitmapFileMaterial;			import flash.display.MovieClip;	*/		//import PaperBase;		public class Main extends flash.display.MovieClip{					var container:Sprite;		var scene:MovieScene3D;		var camera:FreeCamera3D;		var p:Cube;		var s:Sphere;		var plane:Plane;		var bam:BitmapAssetMaterial;		var bam2:BitmapAssetMaterial;		var planeMam:MovieMaterial;		var myPlaneDictionary:Dictionary;		var myPlaneContainer:Sprite;		var loaded_mc:MovieClip;				var ctrX, ctrY:int, xRatio, yRatio;		var blur:BlurFilter;		var filtersArray:Array;						public function Main():void{						myPlaneDictionary = new Dictionary();			loaded_mc = new hello();						container = new Sprite();			container.x = stage.stageWidth *.5;			container.y = stage.stageHeight * .5;			//container.width=200;			//container.height=200;			this.addChild(container);			//container.visible=false;			scene = new MovieScene3D(container);						bam = new BitmapAssetMaterial("test");			bam2 = new BitmapAssetMaterial("test2");			planeMam = new MovieMaterial(loaded_mc, true);			planeMam.smooth=true;			planeMam.oneSide=false;			//planeMam.interactive=true;									bam.oneSide=false;			bam.smooth = true;			bam2.oneSide=false;			bam.smooth = true;						p = new Cube(bam, 500, 500, 500, 40, 40, 40);			s = new Sphere(bam, 2000, 20, 20);			plane = new Plane(planeMam, 207, 69, 4, 4);			s.x=0;			s.y=0;			s.z=0;			s.rotationY=120;						plane.scaleX=plane.scaleY=plane.scaleZ=1.5;			plane.x=0;			plane.y=50;			plane.z=300;					plane.rotationY = -1;						//camera = new FreeCamera3D(p, 10);			camera = new FreeCamera3D();			//var camPosition:Number3D = new Number3D(20, 0, 0);			//camera.goto(camPosition);			camera.x=0;			camera.y=0;			camera.z=0;			camera.focus=300;												//scene.addChild(p);			scene.addChild(s);			scene.addChild(plane);						scene.renderCamera(camera);															////////////  click and movement handlers  //////////////			myPlaneContainer = plane.container;//we use the container sprite propertie of the plane			myPlaneDictionary[myPlaneContainer]=plane;//here we have container as key and plane as value									trace("plane.container: "+ s.container);			myPlaneContainer.buttonMode = true;//we configure a button mode			myPlaneContainer.addEventListener( MouseEvent.ROLL_OVER, onRollOver );			myPlaneContainer.addEventListener( MouseEvent.CLICK, testClick );			myPlaneContainer.addEventListener( MouseEvent.ROLL_OUT, onRollOut );						///////////  register stage-wide click handler  //////////////						//ctrX = container.width *.5;			ctrX = 480;  //forcing half width			//ctrY = container.height * .5;  //container height is returning 900 for some reason			ctrY = 270;  //forcing half height			xRatio = ctrX/90; //150 degree up and down vertical viewing angle			yRatio = ctrY/5;  //45 degree up and down vertical viewing angle			addEventListener(MouseEvent.CLICK, onStageClick);			this.addEventListener(Event.ENTER_FRAME, onEnterFrame);			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			//this.addEventListener(MouseEvent.CLICK, onClick);									////////////////////////////////////////////						//////// add blur filter  /////////			// Create a DropShadowFilter instance.			/////  too slow to use in the actual scene  ////////			/*			blur = new BlurFilter();						blur.blurX = 100;			blur.blurY = 100;			blur.quality = BitmapFilterQuality.LOW;						// Create the filters array, adding the filter to the array by passing it as 			// a parameter to the Array() constructor.			filtersArray = new Array(blur);						// Assign the filters array to the display object to apply the filter.			scene.container.filters = filtersArray;								*/									}						function keyDownHandler(e:KeyboardEvent):void{			trace("keyCode: " + e.keyCode);			if(e.keyCode == 32){				//trace("space bar");								trace("material: "+ s.material);								if(s.material == bam){					trace("current material: bam");					s.material = bam2;				}				else{					trace("current material: bam2");					s.material = bam;				}															}		}				function testClick(e:MouseEvent):void{			trace("clickeroo");			loaded_mc.gotoAndStop("clicked");					}				function onEnterFrame(e:Event):void{			planeMam.updateBitmap();						plane.rotationY % 360 == 0 ? plane.rotationY = 1 : plane.rotationY -=1;						scene.renderCamera(camera);												/////////////  rotation  ////////								//TweenLite.to(Sprite(s.container), 2, {rotationY:180});			var xpos:int = (mouseX - ctrX)/xRatio;			var ypos:int = (ctrY - mouseY)/yRatio;						//trace("xpos: "+ xpos);			//trace("ypos: "+ ypos);								Tweener.addTween(camera, { rotationY:xpos, rotationX:ypos, time:2 } );								}						////////////////////  stage click handler  /////////////////				function onStageClick(e:MouseEvent):void{			/*			//trace("ctrX: "+ ctrX);			//trace("ctrY: "+ ctrY);			trace("xRatio: "+ xRatio);			//TweenLite.to(Sprite(s.container), 2, {rotationY:180});			var xpos:int = (ctrX - mouseX)/xRatio;			Tweener.addTween(s, { rotationY:xpos, time:2 } );			*/		}				//////////////   plane event handler functions  /////////////						function onRollOver(evt:MouseEvent):void{					var sprit:Sprite=evt.target as Sprite;			sprit.alpha = 0.5;							}				function onRollOut(evt:MouseEvent):void{			var sprit:Sprite=evt.target as Sprite;			sprit.alpha = 1									}		/*addEventListener(Event.ENTER_FRAME, onFrame);function onFrame(event:Event):void{p.rotationX % 360 == 0 ? p.rotationX = 1 : p.rotationX += 1;trace(p.rotationX)//p.rotationY = stage.mouseY - (stage.stageHeight * 0.5);scene.renderCamera(camera);}		*/											}		}		